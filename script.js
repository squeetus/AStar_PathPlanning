// method to bring D3 selections to the front
// fixes strange overlap issues with nodes
d3.selection.prototype.moveToFront = function() {
  return this.each(function(){
    this.parentNode.appendChild(this);
  });
};

// hardcoded maps for demonstration and grading purposes
localStorage["map0"] = JSON.stringify([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);
localStorage["map1"] = JSON.stringify([3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3,3,3,3,3,3,5,5,500,500,500,500,500,500,5,5,3,3,3,3,3]);
localStorage["map2"] = JSON.stringify
localStorage["map3"] = JSON.stringify
localStorage["map4"] = JSON.stringify

// event handler for 'generate' button
d3.select("#init").on('click', function() {
  Board.init();
})

// read additional maps from local storage
var mapID = 0;
var mapOptions = null;
var options = null;
(function() {
  mapOptions = d3.select("#controls").append('select')
            .attr('id', 'savedMaps')
            .attr('name', "savedMaps")
            .on("change", function(d, i) {
                Board.init(JSON.parse(localStorage[d3.event.target.value]));
            });
  options = mapOptions.selectAll("option")
             .data(localStorage)
           .enter()
             .append("option")
             .text(function (d, i) { return "map" + i; });

  mapID = options.size();
})();

// function to load the first map found in localstorage
function loadFirstLocal() {
  if(mapID < 0 || !localStorage["map0"])
    return;

  Board.init(JSON.parse(localStorage["map0"]));
}

// event handler for 'solve' button
d3.select("#graph").on('click', function() {
  aStar.solve();
});

// event handler for 'save' button
d3.select("#save").on('click', function() {
  if(Board.graph.length <= 0)
    return;
  localStorage["map" + mapID] = JSON.stringify(Board.graph);
  options = d3.select("#savedMaps").selectAll("option")
             .data(localStorage)
           .enter()
             .append("option")
             .text(function (d, i) { return "map"+i; });
  mapID++;
});

// event handler for 'delete' button
d3.select("#delete").on('click', function() {
  localStorage.removeItem("map" + (mapID-1));
  d3.select("#savedMaps").selectAll("*").remove();
  d3.select("#savedMaps").selectAll("option")
             .data(localStorage)
           .enter()
             .append("option")
             .text(function (d, i) { return "map"+i; });
  loadFirstLocal();
});


// Painter class represents the terrain options and the current drawing method
var Painter = {
  terrain: [
    {"name": "cement", "difficulty": 1, "color": "grey"},
    {"name": "grass", "difficulty": 3, "color": "green"},
    {"name": "sand", "difficulty": 5, "color": "tan"},
    {"name": "water", "difficulty": 500, "color": "blue"},
    {"name": "wall", "difficulty": 1000, "color": "black"}
  ],
  colorFromWeight: {
    1000: "black",
    500: "blue",
    5: "tan",
    3: "green",
    1: "grey"
  },
  terrainIndex: 0,
  currentColor: function() {
    return Painter.terrain[Painter.terrainIndex].color;
  },
  currentWeight: function() {
    return Painter.terrain[Painter.terrainIndex].difficulty;
  },
  currentName: function() {
    return Painter.terrain[Painter.terrainIndex].name;
  },
  painting: false,
  mouseup: function() { this.painting = false; },
  mousedown: function() { this.painting = true; }
} // Painter

// Board class represents the board/map
var Board = {
  // clear the board
  clear: function() {
    d3.select("#board").selectAll("*").remove();
    Board.start = -1;
    Board.end = -1;
    this.graph = [];
    if(Painter.terrainIndex < 0)
      Painter.terrainIndex = 0;

    // reset pallette
    d3.select("#paletteSVG").transition().duration(300).selectAll('g').attr('transform', function(d, i) {
      var y = 10;
      if(Painter.terrainIndex == i) y = 0;
      return 'translate(' + (i * 50) + ", " + y + ")";
    });
    d3.select("#paletteSVG").transition().duration(300).selectAll("circle").style('stroke-width', 0);
    d3.select("#msg")
      .style("color", "red")
      .text("");

  },
  graph: [],  // graph weights
  start: -1,  // start location
  end: -1,    // end location
  // initialize the board. If argument passed, create it on the board
  init: function(map) {
    var parentWidth;
    var size;

    // clear the board
    Board.clear();

    // if argument not passed, create new map
    if(!map) {
      // set size to be a value between 10 - 100
      size = (d3.select("#size")[0][0].value >= 10 && d3.select("#size")[0][0].value <= 100) ? d3.select("#size")[0][0].value : 10;

      // populate data object
      for(var i = 0; i < size * size; i++) {
          Board.graph[i] = 1; // assign unit distance to nodes
      }
    // otherwise, show extant map
    } else {
      size = Math.sqrt(map.length);
      Board.graph = map;
    }

    // set up the board's size
    var board = d3.select("#board")
                    .style("width", function() {
                      parentWidth = this.parentElement.clientWidth - 20
                      return parentWidth;
                    })
                    .style("height", function() {
                      return parentWidth;
                    })
                    .on("mousedown", function() {
                      Painter.mousedown();
                    })
                    .on("mouseup", function() {
                      Painter.mouseup();
                    })

    // add nodes to the board
    var nodes = board.selectAll('.node')
                    .data(Board.graph)
                  .enter().append("rect")
                    .attr('x', function(d, i) {
                      return (i % size) * parentWidth/size;
                    })
                    .attr('y', function(d, i) {
                      return Math.floor(i / size) * parentWidth/size;
                    })
                    .attr('width', function() {
                      return parentWidth/size;
                    })
                    .attr('height', function() {
                      return parentWidth/size;
                    })
                    .attr("id", function(d, i) {
                      return "node" + i;
                    })
                    .attr("index", function(d, i) {
                      return i;
                    })
                    .style('fill', function(d, i) {
                      if(!map) {
                        Board.graph[i] = Painter.currentWeight();
                        return Painter.currentColor();
                      } else {
                        return Painter.colorFromWeight[d];
                      }
                    })
                    .style('stroke', 'black');

      // add the brush
      var brush = d3.svg.brush()
        .x(d3.scale.identity().domain([0, parentWidth]))
        .y(d3.scale.identity().domain([0, parentWidth]))
        .on("brushend", brushed)
        .on("brushstart", function() {
            var nodes = d3.selectAll("rect[id^='node']")
                        .style("opacity", 1);
        });
      board.append("g").attr("class", "brush").call(brush);

      // brush the selection
      function brushed() {
        var e = brush.extent();
        var selected = board.selectAll("rect").filter(function(d) {
          var node = d3.select(this)[0][0];
          if(node.id.indexOf("node") < 0) return false;
          return (node.x.animVal.value <= e[1][0] && node.x.animVal.value + node.width.animVal.value >= e[0][0] && node.y.animVal.value <= e[1][1] && node.y.animVal.value + node.width.animVal.value >= e[0][1]) ? this : null;
        })

        // Adding Start or End position
        if(Painter.terrainIndex < 0) {
          // Start
          if(Painter.terrainIndex == -1) {
            // remove old start
            if(Board.start >= 0) {
              var start = nodes.filter(function(d, i) {
                return (i == Board.start) ? this : null;
              });
              start.style("stroke", "black").style("stroke-width", 1);
            }
            // add new start
            var sel = nodes.filter(function(d, i) {
              return (i == selected[0][0].attributes.index.value) ? this : null;
            });
            sel.style("stroke", "yellow").style("stroke-width", 5);
            Board.start = selected[0][0].attributes.index.value * 1;
            sel.moveToFront();
            d3.selectAll("g.brush").moveToFront();
          // End
          } else if(Painter.terrainIndex == -2) {
            // remove old end
            if(Board.end >= 0) {
              var end = nodes.filter(function(d, i) {
                return (i == Board.end) ? this : null;
              });
              end.style("stroke", "black").style("stroke-width", 1);
            }
            // add new end
            var sel = nodes.filter(function(d, i) {
              return (i == selected[0][0].attributes.index.value) ? this : null;
            });
            sel.style("stroke", "red").style("stroke-width", 5);
            Board.end = selected[0][0].attributes.index.value * 1;
            sel.moveToFront();
            d3.selectAll("g.brush").moveToFront();
          }
        } else {
          selected.transition().duration(500).style('fill', Painter.currentColor);
          selected.each(function(d, i) {
            Board.graph[d3.select(this).attr("index")] = Painter.currentWeight();
          });
        }
        d3.selectAll("g.brush").call(brush.clear());
      }
  }
}; // Board

// set up palette controls
(function() {
  d3.select("#paletteSVG").attr("width", 400);
  var palette = d3.select("#paletteSVG").selectAll('g')
              .data(Painter.terrain)
            .enter().append('g')
              .attr('transform', function(d, i) {
                var y = 10;
                if(Painter.terrainIndex == i) y = 0;
                return 'translate(' + (i * 50) + ", " + y + ")";
              })
              .on('mousedown', function(d, i) {
                Painter.terrainIndex = i;
                var y = 10;
                d3.select("#paletteSVG").transition().duration(300).selectAll('g').attr('transform', function(d, i) {
                  var y = 10;
                  if(Painter.terrainIndex == i) y = 0;
                  return 'translate(' + (i * 50) + ", " + y + ")";
                });
                d3.select("#paletteSVG").transition().duration(300).selectAll('circle').style('stroke-width', 0);

                d3.selectAll("rect[id^='node']")
                    .style("stroke-width", 1)
                    .style("stroke", 'black');

                d3.select("#msg")
                  .style("color", "red")
                  .text("");
              });

  // append terrain options
  palette.append('rect')
      .attr('width', 50)
      .attr('height', 50)
      .style('fill', function(d, i) {
        return d.color;
      })

  // append terrain weights
  palette.append("text")
      .attr("x", function(d, i) {
        if(i < 4)
          return 18;
        else
          return 80;
      })
      .attr("y", 25)
      .attr("dy", ".35em")
      .style("fill", 'white')
      .text(function(d) { return d.difficulty; });

  // append start node
  d3.select("#paletteSVG").append("circle")
      .attr("cx", 300)
      .attr('cy', 30)
      .attr("r", 20)
      .style('stroke', 'black')
      .style('stroke-width', 0)
      .style('fill', 'yellow')
      .on('mousedown', function() {
        Painter.terrainIndex = -1;
        d3.select("#paletteSVG").transition().duration(300).selectAll('g').attr('transform', function(d, i) {
          return 'translate(' + (i * 50) + ", 10)";
        });
        d3.select("#paletteSVG").selectAll("circle").transition().duration(300).style('stroke-width', 0);
        d3.select(this).transition().duration(300).style('stroke', 'black').style('stroke-width', 5);
        d3.select("#msg")
          .style("color", "red")
          .text("");
      });

  // append end node
  d3.select("#paletteSVG").append("circle")
      .attr("cx", 350)
      .attr('cy', 30)
      .attr("r", 20)
      .style('stroke', 'black')
      .style('stroke-width', 0)
      .style('fill', 'red')
      .on('mousedown', function() {
        Painter.terrainIndex = -2;
        d3.select("#paletteSVG").transition().duration(300).selectAll('g').attr('transform', function(d, i) {
          return 'translate(' + (i * 50) + ", 10)";
        });
        d3.select("#paletteSVG").transition().duration(300).selectAll("circle").style('stroke-width', 0);
        d3.select(this).transition().duration(300).style('stroke', 'black').style('stroke-width', 5);
        d3.select("#msg")
          .style("color", "red")
          .text("");
      });

      // reset message and borders on mousedown
      d3.select("#paletteSVG").on('mousedown', function() {
        d3.select("#msg")
          .style("color", "red")
          .text("");
        var nodes = d3.selectAll("rect[id^='node']").transition().duration(500).style("opacity", 1);
      });

})();

// create new binary heap with the given score function
function BinaryHeap(scoreFunction){
    this.content = [];
    this.scoreFunction = scoreFunction;
}

// Binary heap implementation from eloquent javascript
// source: http://eloquentjavascript.net/1st_edition/appendix2.html
BinaryHeap.prototype = {
    clear: function() {
      this.content = [];
    },
    contains: function(n) {

      for(var o in this.content) {
        // console.log(n, this.content[o].i);
        if((this.content[o].i * 1) == n.i)
          return o;
      }
      return false;
    },
    push: function(element) {
        // Add the new element to the end of the array.
        this.content.push(element);

        // Allow it to sink down.
        this.sinkDown(this.content.length - 1);
    },
    pop: function() {
        // Store the first element so we can return it later.
        var result = this.content[0];
        // Get the element at the end of the array.
        var end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it bubble up.
        if (this.content.length > 0) {
            this.content[0] = end;
            this.bubbleUp(0);
        }
        return result;
    },
    remove: function(node) {
        var i = this.content.indexOf(node);

        // When it is found, the process seen in 'pop' is repeated
        // to fill up the hole.
        var end = this.content.pop();

        if (i !== this.content.length - 1) {
            this.content[i] = end;

            if (this.scoreFunction(end) < this.scoreFunction(node)) {
                this.sinkDown(i);
            }
            else {
                this.bubbleUp(i);
            }
        }
    },
    size: function() {
        return this.content.length;
    },
    sinkDown: function(n) {
        // Fetch the element that has to be sunk.
        var element = this.content[n];

        // When at 0, an element can not sink any further.
        while (n > 0) {

            // Compute the parent element's index, and fetch it.
            var parentN = ((n + 1) >> 1) - 1,
                parent = this.content[parentN];
            // Swap the elements if the parent is greater.
            if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                this.content[parentN] = element;
                this.content[n] = parent;
                // Update 'n' to continue at the new position.
                n = parentN;
            }
            // Found a parent that is less, no need to sink any further.
            else {
                break;
            }
        }
    },
    bubbleUp: function(n) {
        // Look up the target element and its score.
        var length = this.content.length,
            element = this.content[n],
            elemScore = this.scoreFunction(element);

        while(true) {
            // Compute the indices of the child elements.
            var child2N = (n + 1) << 1,
                child1N = child2N - 1;
            // This is used to store the new position of the element, if any.
            var swap = null,
                child1Score;
            // If the first child exists (is inside the array)...
            if (child1N < length) {
                // Look it up and compute its score.
                var child1 = this.content[child1N];
                child1Score = this.scoreFunction(child1);

                // If the score is less than our element's, we need to swap.
                if (child1Score < elemScore){
                    swap = child1N;
                }
            }

            // Do the same checks for the other child.
            if (child2N < length) {
                var child2 = this.content[child2N],
                    child2Score = this.scoreFunction(child2);
                if (child2Score < (swap === null ? elemScore : child1Score)) {
                    swap = child2N;
                }
            }

            // If the element needs to be moved, swap it, and continue.
            if (swap !== null) {
                this.content[n] = this.content[swap];
                this.content[swap] = element;
                n = swap;
            }
            // Otherwise, we are done.
            else {
                break;
            }
        }
    }
};

// A* class to solve the given puzzle
var aStar = {
  // open list
  'nodes': (function() { return new BinaryHeap(function(x){return x.g + x.h;}) })(),
  'closed': {}, // closed list
  'clear': function() { // clear the representation
      this.nodes.clear();
      this.closed = {};
      d3.selectAll("rect[id^='node']").transition().duration(500).style("opacity", 0.1);
      d3.select("#msg")
        .style("color", "red")
        .text("");
  },
  'solve': function() { // find an optimal shortest path
      if(Board.start < 0 || Board.end < 0) {
        d3.select("#msg")
          .style("color", "red")
          .text("Set START and END positions (with the yellow and red circles)");
        console.log("SET START AND FINISH");
        return;
      }
      var size = Math.sqrt(Board.graph.length);
      var delayIndex = 0;
      var depth = 0;
      var path = function(n) {  // recreate optimal path
        var nodes = d3.selectAll("rect[id^='node']");
        var path = [];
        var pathcost = 0;

        // traverse path
        while(n) {
            path.push(""+n.i);
            pathcost += Board.graph[n.i];
            n = n.parent;
        }
        // update message and show path
        d3.select("#msg")
          .style("color", "red")
          .text("SUCCESS! Path costs " + pathcost);
        nodes.filter(function(d, i) {
          return path.indexOf(d3.select(this).attr("index")) >= 0 ? this : null;
        }).transition().duration(500).delay(delayIndex + 1500)
            .style("opacity", 0.9)
            .style("stroke", "red")
            .style("stroke-width", 5);
      }

      // city block heuristic
      var cityBlock = function(n) {
        var size = Math.sqrt(Board.graph.length);
        var d1 = Math.abs((n % size) - (Board.end % size));
        var d2 = Math.abs(Math.floor(n / size) - Math.floor(Board.end / size));
        return d1 + d2;
      }

      // clear
      this.clear();

      var node = {};
      node.i = Board.start;
      node.g = 0;
      node.h = cityBlock(node.i);
      this.nodes.push(node);
      var n = null;

      // handle the successors of a given node
      var handleSuccessors = function(n) {

        var size = Math.sqrt(Board.graph.length);
        var successors = [];  // indices of successor states
        n.i = n.i * 1;
        if(n.i > size - 1) {// up
          successors.push(n.i - size);
        }
        if(n.i % size != 0) {// left
          successors.push(n.i - 1);
        }
        if(n.i < ((size * size) - size)) {// down
          successors.push(n.i + size);
        }
        if((n.i + 1) % size != 0 || n.i == 0 || n.i == size * (size - 1)) {// right
          successors.push(n.i + 1);
        }

        // iterate over possible successor nodes
        for(var s in successors) {

          var node = {};
          node.g = n.g + Board.graph[successors[s]];

          // see if node is impassable
          if(Board.graph[successors[s]] >= 1000) {
            d3.select("#node" + successors[s]).transition().delay((1000) + delayIndex).style("opacity", 0.4);
            delayIndex += (10/(size/2));
            continue;
          }

          // set node attributes for successor
          node.h = cityBlock(successors[s]);
          node.i = successors[s];
          node.parent = n;

          if(aStar.closed[node.i]){// see if closed list conatins current node at better cost
            continue;
          }

          // see if open list (nodes) contains current node
          var index = aStar.nodes.contains(n);
          if(index) {
            if((aStar.nodes.content[index].h + aStar.nodes.content[index].g) > (node.g + node.h)) {
              aStar.nodes.remove(index);
              aStar.nodes.push(node);
            }
          }  else {
            aStar.nodes.push(node);
            d3.select("#node" + node.i).transition().delay((1000) + delayIndex).style("opacity", 0.4);
            delayIndex += (10/(size/2));
          }

        }

      } // handle successors

      while(this.nodes.size() > 0) {
        // 	get top priority node
        // 	add it to closed map
        n = this.nodes.pop();
        this.closed[n.i] = true;

        // GOAL STATE
        if(n.i == Board.end) {
          path(n);
          return;
        // not goal state
        } else {
          handleSuccessors(n)
        }
      }
      // otherwise, failure
      d3.select("#msg")
        .style("color", "red")
        .text("FAILURE");
  }
}

// load the first map whenever the script is loaded
loadFirstLocal();
